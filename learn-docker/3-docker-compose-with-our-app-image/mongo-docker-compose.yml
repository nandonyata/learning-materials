# NOTESS:
# Docker compose takes care of creating a common network !!! 
# so we dont have to create and specify the network


# RUN COMMAND:
# docker-compose -f mongo-docker-compose.yml up -d

version: '3'
services:
  my-golang-app: # container name
    build: . # we dont have the image yet, but we wanted to run the app along here, so we build it, the dot "." is represent where the Dockerfile location is
    ports:
      - 9002:9002
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=psw

  mongo_db: # container name
    image: mongo # image name
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=psw

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo_db
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=psw
    depends_on:
      - mongo_db # necessary if this service is dependant on other service, like need that service to start first


# 
# 
# 
# if changing this compose config, and wana restart or stop
# 
# RUN COMMAND:
# docker-compose -f mongo-docker-compose.yml down => Stops and removes containers
# docker-compose -f mongo-docker-compose.yml stop => Stop
# docker-compose -f mongo-docker-compose.yml start => Re-start stopped